name: Deploy to Staging

on:
  push:
    branches: [develop]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.25.1'
      
      - name: Build
        run: go build -o app ./cmd/api
      
      - name: Build Docker image
        run: docker build -t monogo:staging .
      
      - name: Deploy to staging
        run: echo "Deploy to staging environment"
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb?sslmode=disable
          REDIS_URL: redis://localhost:6379
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: 🔧 Run integration tests
        env:
          DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb?sslmode=disable
          REDIS_URL: redis://localhost:6379
        run: |
          # Se existirem testes de integração
          if [ -d "tests/integration" ]; then
            go test -v -tags=integration ./tests/integration/...
          fi

      - name: 🚀 Run end-to-end tests
        env:
          DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb?sslmode=disable
          REDIS_URL: redis://localhost:6379
        run: |
          # Build application for e2e tests
          go build -o ./bin/monogo ./cmd/api
          
          # Start application in background
          ./bin/monogo auth --port=8080 &
          APP_PID=$!
          
          # Wait for application to start
          sleep 5
          
          # Basic health check
          curl -f http://localhost:8080/health || exit 1
          
          # Stop application
          kill $APP_PID

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            coverage.out
            test-results.xml

  # 🏗️ Build and Push Container
  build-and-push:
    name: 🏗️ Build & Push Container
    runs-on: ubuntu-latest
    needs: extended-tests
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=staging

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 📝 Generate image output
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging" >> $GITHUB_OUTPUT

  # 🔒 Security Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    environment:
      name: staging
      url: https://staging.monogo.app
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔐 Configure AWS credentials (if using EKS)
        if: false  # Ativar se usando AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 🎯 Deploy to Kubernetes
        run: |
          # Substituir placeholders no deployment
          sed -i "s|IMAGE_TAG|${{ needs.build-and-push.outputs.image }}|g" k8s/staging/deployment.yaml
          
          # Aplicar configurações do Kubernetes
          kubectl apply -f k8s/staging/ --validate=false
          
          # Aguardar deployment
          kubectl rollout status deployment/monogo-staging -n staging --timeout=300s

      - name: 🏥 Health check
        run: |
          # Aguardar que o serviço esteja disponível
          sleep 30
          
          # Verificar health endpoint
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f https://staging.monogo.app/health; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Health check failed, attempt $attempt/$max_attempts"
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            exit 1
          fi

      - name: 🧪 Smoke tests
        run: |
          echo "🧪 Running smoke tests against staging..."
          
          # Testes básicos de API
          curl -f https://staging.monogo.app/health
          curl -f https://staging.monogo.app/api/v1/health
          
          # Se tiver endpoints específicos para testar
          # curl -f https://staging.monogo.app/api/v1/auth/healthcheck

  # 📊 Performance Testing
  performance-test:
    name: 📊 Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push'  # Só roda em push, não em workflow_dispatch
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🏃 Run load tests
        run: |
          # Criar script básico de load test se não existir
          if [ ! -f "tests/load/basic.js" ]; then
            mkdir -p tests/load
            cat > tests/load/basic.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            stages: [
              { duration: '30s', target: 20 },
              { duration: '1m', target: 20 },
              { duration: '30s', target: 0 },
            ],
          };

          export default function () {
            let response = http.get('https://staging.monogo.app/health');
            check(response, { 'status was 200': (r) => r.status == 200 });
            sleep(1);
          }
          EOF
          fi
          
          # Executar testes de carga
          k6 run tests/load/basic.js

  # 📢 Notification
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: always()
    steps:
      - name: 💬 Notify deployment status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentStatus = '${{ needs.deploy-staging.result }}';
            const performanceStatus = '${{ needs.performance-test.result }}';
            
            let status = '✅ Success';
            let color = '28a745';
            
            if (deploymentStatus !== 'success' || performanceStatus !== 'success') {
              status = '❌ Failed';
              color = 'd73a49';
            }
            
            const message = `## 🚀 Staging Deployment ${status}
            
            **Branch:** \`develop\`
            **Commit:** \`${{ github.sha }}\`
            **Environment:** Staging
            
            **Results:**
            - Deployment: ${deploymentStatus === 'success' ? '✅' : '❌'} ${deploymentStatus}
            - Performance Tests: ${performanceStatus === 'success' ? '✅' : '❌'} ${performanceStatus}
            
            **Environment URL:** https://staging.monogo.app
            
            ---
            *Automated deployment by GitHub Actions 🤖*`;
            
            // Se tiver Slack webhook configurado
            if ('${{ secrets.SLACK_WEBHOOK }}') {
              // Enviar para Slack
              console.log('Would send to Slack:', message);
            }