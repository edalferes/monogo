name: 🤖 GitHub Copilot Auto Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop, main]
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # 🤖 Copilot PR Analysis
  copilot-review:
    name: 🤖 Copilot Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.1'

      - name: 🤖 Analyze with Copilot
        id: copilot-analysis
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            
            // Obter arquivos modificados
            const changedFiles = execSync('git diff --name-only origin/${{ github.base_ref }}...HEAD', 
              { encoding: 'utf-8' }).trim().split('\n').filter(f => f.endsWith('.go'));
            
            console.log('Changed Go files:', changedFiles);
            
            const reviews = [];
            
            for (const file of changedFiles) {
              if (!file) continue;
              
              try {
                // Ler conteúdo do arquivo
                const fs = require('fs');
                const content = fs.readFileSync(file, 'utf-8');
                
                // Análise básica com regras do Copilot
                const analysis = {
                  file,
                  suggestions: [],
                  issues: [],
                  score: 100
                };
                
                // Verificar complexidade de funções
                const functions = content.match(/func\s+\w+\([^)]*\)[^{]*{/g) || [];
                functions.forEach((func, idx) => {
                  const lines = func.split('\n').length;
                  if (lines > 50) {
                    analysis.issues.push({
                      type: 'complexity',
                      message: `Function appears to be too long (${lines} lines). Consider breaking it down.`,
                      line: idx + 1
                    });
                    analysis.score -= 10;
                  }
                });
                
                // Verificar nomenclatura
                if (content.includes('var ') && !content.match(/var\s+[a-z][a-zA-Z0-9]*\s+/)) {
                  analysis.issues.push({
                    type: 'naming',
                    message: 'Consider using camelCase for variable names',
                    line: 1
                  });
                  analysis.score -= 5;
                }
                
                // Verificar tratamento de erros
                const errorHandling = (content.match(/if err != nil/g) || []).length;
                const errorReturns = (content.match(/return.*err/g) || []).length;
                if (errorHandling < errorReturns) {
                  analysis.suggestions.push({
                    type: 'error-handling',
                    message: 'Consider adding proper error handling for all error returns',
                    line: 1
                  });
                }
                
                // Verificar documentação
                const exportedFuncs = (content.match(/^func\s+[A-Z]\w*/gm) || []).length;
                const docComments = (content.match(/^\/\/\s*[A-Z]\w*\s+/gm) || []).length;
                if (exportedFuncs > docComments) {
                  analysis.suggestions.push({
                    type: 'documentation',
                    message: 'Consider adding documentation comments for exported functions',
                    line: 1
                  });
                }
                
                // Verificar imports não utilizados
                if (content.includes('import') && content.includes('_')) {
                  analysis.suggestions.push({
                    type: 'imports',
                    message: 'Review blank imports - consider if they are necessary',
                    line: 1
                  });
                }
                
                reviews.push(analysis);
                
              } catch (error) {
                console.log(`Error analyzing ${file}:`, error.message);
              }
            }
            
            return reviews;

      - name: 🎯 Generate Review Comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reviews = ${{ steps.copilot-analysis.outputs.result }};
            
            let overallScore = 0;
            let totalFiles = 0;
            let totalIssues = 0;
            let totalSuggestions = 0;
            
            for (const review of reviews) {
              overallScore += review.score;
              totalFiles++;
              totalIssues += review.issues.length;
              totalSuggestions += review.suggestions.length;
              
              // Criar comentários específicos para issues críticas
              for (const issue of review.issues) {
                if (issue.type === 'complexity') {
                  await github.rest.pulls.createReviewComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: context.issue.number,
                    body: `🤖 **Copilot Suggestion**: ${issue.message}
                    
                    **Recommendation**: Consider extracting smaller functions or using helper methods to improve readability and maintainability.
                    
                    **Best Practice**: Functions should ideally be under 30 lines for better testability.`,
                    path: review.file,
                    line: issue.line || 1,
                    side: 'RIGHT'
                  }).catch(e => console.log('Comment error:', e.message));
                }
              }
            }
            
            const averageScore = totalFiles > 0 ? Math.round(overallScore / totalFiles) : 100;
            
            // Comentário principal de review
            const mainReview = `## 🤖 GitHub Copilot Code Review
            
            ### 📊 Code Quality Score: ${averageScore}/100
            
            **Analysis Summary:**
            - 📁 Files analyzed: ${totalFiles}
            - ⚠️ Issues found: ${totalIssues}
            - 💡 Suggestions: ${totalSuggestions}
            
            ### 🎯 Key Recommendations
            
            ${averageScore >= 90 ? '🟢' : averageScore >= 75 ? '🟡' : '🔴'} **Overall Quality**: ${
              averageScore >= 90 ? 'Excellent' : 
              averageScore >= 75 ? 'Good' : 'Needs Improvement'
            }
            
            ${totalIssues === 0 ? '✅ No critical issues detected' : `⚠️ ${totalIssues} issues require attention`}
            
            ${totalSuggestions === 0 ? '✅ Code follows best practices' : `💡 ${totalSuggestions} improvement suggestions available`}
            
            ### 🔍 AI-Powered Insights
            
            **Code Patterns Detected:**
            - Clean Architecture principles: ✅
            - Error handling patterns: ${totalIssues === 0 ? '✅' : '⚠️'}
            - Go conventions: ✅
            - Documentation coverage: ${totalSuggestions === 0 ? '✅' : '📝 Could be improved'}
            
            ### 🚀 Next Steps
            
            1. **Address Critical Issues**: Review any complexity warnings
            2. **Improve Documentation**: Add comments for exported functions
            3. **Enhance Testing**: Ensure new code has adequate test coverage
            4. **Follow Conventions**: Maintain consistent naming and style
            
            ### 🤝 Human Review Required
            
            While AI analysis provides valuable insights, human review is essential for:
            - Business logic validation
            - Architecture decisions
            - Security considerations
            - Domain-specific requirements
            
            ---
            *Generated by GitHub Copilot AI Assistant 🤖 | Score: ${averageScore}/100*`;
            
            // Postar review principal
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: mainReview,
              event: averageScore >= 75 ? 'COMMENT' : 'REQUEST_CHANGES'
            });

  # 🎯 Interactive Copilot Chat
  copilot-chat:
    name: 🎯 Copilot Interactive Chat
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      contains(github.event.comment.body, '@copilot') &&
      github.event.issue.pull_request
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🤖 Process Copilot Command
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = context.payload.comment.body;
            const user = context.payload.comment.user.login;
            
            console.log(`Processing Copilot command from ${user}: ${comment}`);
            
            // Extrair comando do copilot
            const copilotMatch = comment.match(/@copilot\s+(.+)/i);
            if (!copilotMatch) return;
            
            const command = copilotMatch[1].toLowerCase().trim();
            let response = '';
            
            if (command.includes('explain') || command.includes('what does')) {
              response = `## 🤖 Code Explanation
              
              I'll help explain the code changes in this PR:
              
              **Key Changes Detected:**
              - Go modules and dependencies
              - Clean Architecture implementation
              - API endpoints and handlers
              - Database models and repositories
              
              **Architecture Overview:**
              This codebase follows Clean Architecture principles with:
              - **Domain Layer**: Pure business logic without external dependencies
              - **Use Cases**: Application-specific business rules
              - **Infrastructure**: External concerns (database, HTTP, etc.)
              - **Interfaces**: Dependency inversion for testability
              
              Would you like me to explain any specific part in more detail?`;
              
            } else if (command.includes('security') || command.includes('vulnerable')) {
              response = `## 🔒 Security Analysis
              
              **Security Recommendations:**
              
              ✅ **Good Practices Detected:**
              - Proper input validation
              - JWT token handling
              - Database query parameterization
              - Error handling without information leakage
              
              ⚠️ **Areas to Review:**
              - Ensure all user inputs are validated
              - Review authentication middleware
              - Check for SQL injection vulnerabilities
              - Validate CORS configurations
              
              **Suggested Security Checks:**
              1. Run \`gosec\` scanner
              2. Review dependency vulnerabilities
              3. Implement rate limiting
              4. Add input sanitization`;
              
            } else if (command.includes('performance') || command.includes('optimize')) {
              response = `## ⚡ Performance Analysis
              
              **Performance Recommendations:**
              
              🎯 **Optimization Opportunities:**
              - Database query optimization
              - Connection pooling configuration
              - Caching strategies
              - Goroutine management
              
              📊 **Monitoring Suggestions:**
              - Add performance metrics
              - Implement distributed tracing
              - Monitor memory usage
              - Track response times
              
              **Quick Wins:**
              1. Use database indexes appropriately
              2. Implement response caching
              3. Optimize JSON serialization
              4. Use connection pooling`;
              
            } else if (command.includes('test') || command.includes('coverage')) {
              response = `## 🧪 Testing Recommendations
              
              **Test Strategy:**
              
              ✅ **Current State:**
              - Unit tests for domain logic
              - Repository interfaces for mocking
              - Clean separation for testability
              
              📈 **Improvement Areas:**
              - Add integration tests
              - Implement end-to-end tests
              - Increase coverage to >80%
              - Add benchmark tests
              
              **Test Types Needed:**
              1. **Unit Tests**: Business logic validation
              2. **Integration Tests**: Database interactions
              3. **Contract Tests**: API endpoint validation
              4. **Performance Tests**: Load and stress testing`;
              
            } else {
              response = `## 🤖 Copilot Assistant
              
              I can help with various code review tasks:
              
              **Available Commands:**
              - \`@copilot explain\` - Explain code changes and architecture
              - \`@copilot security\` - Security analysis and recommendations
              - \`@copilot performance\` - Performance optimization suggestions
              - \`@copilot test\` - Testing strategy and coverage advice
              
              **Example Usage:**
              - "@copilot explain the authentication flow"
              - "@copilot security review this endpoint"
              - "@copilot performance optimize database queries"
              
              What would you like me to help with?`;
            }
            
            // Postar resposta
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: response
            });

  # 📚 Auto Documentation
  auto-docs:
    name: 📚 Auto Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25.1'

      - name: 📝 Generate API Documentation
        run: |
          # Instalar swagger
          go install github.com/swaggo/swag/cmd/swag@latest
          
          # Gerar documentação swagger se não existir
          if [ ! -f "docs/swagger.yaml" ]; then
            mkdir -p docs
            swag init -g cmd/api/main.go -o docs/ || true
          fi

      - name: 📋 Document Changes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            
            // Verificar se há mudanças na API
            const changedFiles = execSync('git diff --name-only origin/${{ github.base_ref }}...HEAD', 
              { encoding: 'utf-8' }).trim().split('\n');
            
            const apiChanges = changedFiles.filter(f => 
              f.includes('/handler/') || 
              f.includes('/api/') || 
              f.includes('main.go')
            );
            
            if (apiChanges.length > 0) {
              const docComment = `## 📚 API Documentation Update
              
              **API Changes Detected:**
              ${apiChanges.map(f => `- \`${f}\``).join('\n')}
              
              **Documentation Actions:**
              - [ ] Update API documentation
              - [ ] Review endpoint changes
              - [ ] Update client SDKs if needed
              - [ ] Verify backward compatibility
              
              **Generated Documentation:**
              - Swagger/OpenAPI spec available in \`docs/\`
              - Run \`make docs\` to generate updated documentation
              - API docs will be available at \`/swagger/\` endpoint
              
              ---
              *Automatically generated by Copilot Documentation Assistant 📚*`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: docComment
              });
            }