# golangci-lint configuration
# https://golangci-lint.run/usage/configuration/

# Options for analysis running
run:
  # timeout for analysis
  timeout: 5m
  
  # exit code when at least one issue was found
  issues-exit-code: 1
  
  # include test files
  tests: true
  
  # list of build tags
  build-tags:
    - integration
  
  # which dirs to skip
  skip-dirs:
    - vendor
    - docs
  
  # which files to skip
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_gen\\.go$"

# Output configuration
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  format: colored-line-number
  
  # print lines of code with issue
  print-issued-lines: true
  
  # print linter name in the end of issue text
  print-linter-name: true
  
  # make issues output unique by line
  uniq-by-line: true
  
  # sort results by: filepath, line and column
  sort-results: true

# Linters configuration
linters:
  enable:
    # Default linters
    - errcheck      # checking for unchecked errors
    - gosimple      # simplify code
    - govet         # reports suspicious constructs
    - ineffassign   # detects ineffectual assignments
    - staticcheck   # advanced Go linter
    - typecheck     # type-checks Go code
    - unused        # checks for unused constants, variables, functions and types
    
    # Additional recommended linters
    - asciicheck    # checks that your code does not contain non-ASCII identifiers
    - bodyclose     # checks whether HTTP response body is closed successfully
    - cyclop        # checks function and package cyclomatic complexity
    - dupl          # tool for code clone detection
    - durationcheck # check for two durations multiplied together
    - errorlint     # find code that will cause problems with Go 1.13 error wrapping
    - exhaustive    # check exhaustiveness of enum switch statements
    - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo     # forbids identifiers
    - funlen        # tool for detection of long functions
    - gci           # control golang package import order and make it always deterministic
    - gocognit      # computes and checks the cognitive complexity of functions
    - goconst       # finds repeated strings that could be replaced by a constant
    - gocritic      # comprehensive Go source code linter
    - gocyclo       # computes and checks the cyclomatic complexity of functions
    - godot         # check if comments end in a period
    - gofmt         # checks whether code was gofmt-ed
    - gofumpt       # checks whether code was gofumpt-ed
    - goheader      # checks is file header matches to pattern
    - goimports     # check import statements are formatted according to the 'goimport' command
    - gomnd         # detects magic numbers
    - gomodguard    # allow and block list linter for direct Go module dependencies
    - goprintffuncname # checks that printf-like functions are named with f at the end
    - gosec         # inspects source code for security problems
    - lll           # reports long lines
    - makezero      # finds slice declarations with non-zero initial length
    - misspell      # finds commonly misspelled English words in comments
    - nestif        # reports deeply nested if statements
    - nilerr        # finds the code that returns nil even if it checks that the error is not nil
    - nlreturn      # checks for a new line before return and branch statements
    - noctx         # finds sending http request without context.Context
    - nolintlint    # reports ill-formed or insufficient nolint directives
    - prealloc      # finds slice declarations that could potentially be preallocated
    - predeclared   # find code that shadows one of Go's predeclared identifiers
    - revive        # fast, configurable, extensible, flexible, and beautiful linter for Go
    - rowserrcheck  # checks whether Err of rows is checked successfully
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed
    - stylecheck    # replacement for golint
    - thelper       # detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel     # detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert     # remove unnecessary type conversions
    - unparam       # reports unused function parameters
    - wastedassign  # finds wasted assignment statements
    - whitespace    # detection of leading and trailing whitespace

  disable:
    - containedctx  # detects struct contained context.Context field
    - contextcheck  # check the function whether use a non-inherited context
    - decorder      # check declaration order and count of types, constants, variables and functions
    - depguard      # checks if package imports are in a list of acceptable packages
    - dogsled       # checks assignments with too many blank identifiers
    - exhaustivestruct # checks if all struct's fields are initialized
    - forcetypeassert # finds forced type assertions
    - goerr113      # checks the errors handling expressions
    - golint        # deprecated, use revive instead
    - grouper       # analyze expression groups
    - ifshort       # checks that your code uses short syntax for if-statements
    - importas      # enforces consistent import aliases
    - interfacer    # deprecated
    - ireturn       # accept interfaces, return concrete types
    - maintidx      # measures the maintainability index of each function
    - maligned      # deprecated, use govet 'fieldalignment' instead
    - nakedret      # finds naked returns in functions greater than a specified function length
    - nilnil        # checks that there is no simultaneous return of nil error and nil value
    - nonamedreturns # reports all named returns
    - nosnakecase   # detects snake_case of variable naming and function naming
    - nosprintfhostport # checks for misuse of Sprintf to construct a host with port in a URL
    - paralleltest  # detects missing usage of t.Parallel() method in your Go test
    - promlinter    # check Prometheus metrics naming via promlint
    - scopelint     # deprecated, use exportloopref instead
    - tagliatelle   # checks the struct tags
    - testpackage   # makes you use a separate _test package
    - varnamelen    # checks that the length of a variable's name matches its scope
    - wrapcheck     # checks that errors returned from external packages are wrapped
    - wsl           # whitespace linter forces you to use empty lines

# Linters settings
linters-settings:
  # settings of specific linters
  cyclop:
    max-complexity: 15
    
  dupl:
    threshold: 100
    
  errorlint:
    errorf: true
    
  exhaustive:
    default-signifies-exhaustive: false
    
  funlen:
    lines: 100
    statements: 50
    
  gci:
    local-prefixes: github.com/edalferes/monogo
    
  gocognit:
    min-complexity: 15
    
  goconst:
    min-len: 2
    min-occurrences: 3
    
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport
      - ifElseChain
      - octalLiteral
      - whyNoLint
      
  gocyclo:
    min-complexity: 15
    
  godot:
    scope: declarations
    exclude:
      - "^fixme:"
      - "^todo:"
      
  gofumpt:
    extra-rules: true
    
  goimports:
    local-prefixes: github.com/edalferes/monogo
    
  gomnd:
    settings:
      mnd:
        checks:
          - argument
          - case
          - condition
          - operation
          - return
          - assign
        ignored-numbers: 0,1,2,3
        ignored-functions: strings.SplitN
        
  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
          
  lll:
    line-length: 120
    
  misspell:
    locale: US
    
  nestif:
    min-complexity: 4
    
  nlreturn:
    block-size: 1
    
  prealloc:
    simple: true
    range-loops: true
    for-loops: false
    
  revive:
    min-confidence: 0
    rules:
      - name: atomic
      - name: line-length-limit
        arguments: [120]
      - name: argument-limit
        arguments: [8]
      - name: cyclomatic
        arguments: [15]
      - name: max-public-structs
        arguments: [10]
      - name: file-header
        disabled: true
        
  staticcheck:
    go: "1.25.1"
    checks: ["all"]
    
  stylecheck:
    go: "1.25.1"
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    dot-import-whitelist:
      - fmt
      
  unparam:
    check-exported: false
    
  unused:
    go: "1.25.1"

# Issues configuration
issues:
  # List of regexps of issue texts to exclude
  exclude:
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print.*|os\.(Un)?Setenv). is not checked
    
    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)
    
    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop
    
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gomnd
        - funlen
        - dupl
        
    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA9003:"
      
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "
      
  # Independently from option exclude use default exclude patterns
  exclude-use-default: false
  
  # If set to true exclude and exclude-rules regular expressions become case sensitive
  exclude-case-sensitive: false
  
  # The list of ids of default excludes to include or disable
  include:
    - EXC0002 # disable excluding of issues about comments from golint
    
  # Maximum issues count per one linter
  max-issues-per-linter: 50
  
  # Maximum count of issues with the same text
  max-same-issues: 3
  
  # Show only new issues: if there are unstaged changes or untracked files
  new: false
  
  # Show only new issues created after git revision
  new-from-rev: ""
  
  # Show only new issues created in git patch with set file path
  new-from-patch: ""
  
  # Fix found issues (if it's supported by the linter)
  fix: false

severity:
  # Default value is empty string
  # Set the default severity for issues
  default-severity: error
  
  # The default value is false
  # If set to true severity-rules regular expressions become case sensitive
  case-sensitive: false
  
  # Default value is empty list
  # When a list of severity rules are provided, severity information will be added to lint issues
  rules:
    - linters:
      - dupl
      severity: info